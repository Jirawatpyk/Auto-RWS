require('dotenv').config();
const { ImapFlow } = require('imapflow');
const { logInfo, logSuccess, logFail, logProgress } = require('../Logs/logger');
const { notifyGoogleChat } = require('../Logs/notifier');
const { fetchNewEmails, initLastSeenUid } = require('./fetcher');

const MAILBOX = process.env.MAILBOX || 'Symfonie/Order';
const ALLOW_BACKFILL = process.env.ALLOW_BACKFILL === 'true';

// ‚úÖ 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° Configuration Constants (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
const CONFIG = {
  CONNECTION_TIMEOUT: 30000,    // 30 seconds
  IDLE_TIMEOUT: 300000,        // 5 minutes  
  KEEPALIVE_INTERVAL: 60000,   // 1 minute
  MAX_RETRIES: 5,
  INITIAL_RETRY_DELAY: 5000,   // 5 seconds
  MAX_RETRY_DELAY: 600000      // 10 minutes (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ)
};

let client = null;
let callbackRef = null;
let isConnecting = false;
let alreadyHandled = false;
let reconnecting = false;
let retryCount = 0;
let isPaused = false;

// ‚úÖ 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° Connection Metrics (Optional)
let connectionStats = {
  startTime: Date.now(),
  totalConnections: 0,
  totalReconnects: 0,
  lastConnectionTime: null,
  totalUptime: 0
};

async function connectToImap(callback) {
    if (isConnecting) return;
    isConnecting = true;
    callbackRef = callback;

    const config = {
        host: 'imap.gmail.com',
        port: 993,
        secure: true,
        logger: false,
        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout settings
        socketTimeout: CONFIG.CONNECTION_TIMEOUT,
        greetingTimeout: CONFIG.CONNECTION_TIMEOUT,
        auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASS
        }
    };

    if (!config.auth.user || !config.auth.pass) {
        logFail('‚ùå Missing EMAIL_USER or EMAIL_PASS in .env');
        isConnecting = false;
        return;
    }

    client = new ImapFlow(config);

    try {
        // ‚úÖ 3. ‡πÄ‡∏û‡∏¥‡πà‡∏° timing info
        const connectionStart = Date.now();
        logInfo('üî° Connecting to IMAP...');
        
        await client.connect();
        alreadyHandled = false;
        
        const connectionTime = Date.now() - connectionStart;
        logSuccess(`üü¢ IMAP connection established (${connectionTime}ms)`);
        
        // ‚úÖ Update stats
        connectionStats.totalConnections++;
        connectionStats.lastConnectionTime = Date.now();
        if (retryCount > 0) {
            connectionStats.totalReconnects++;
        }
        retryCount = 0;

        await client.mailboxOpen(MAILBOX);
        logInfo(`üì¨ Mailbox "${MAILBOX}" opened`);
        await initLastSeenUid(client, MAILBOX, ALLOW_BACKFILL);
        
        // ‚úÖ 4. ‡πÄ‡∏û‡∏¥‡πà‡∏° connection info ‡πÉ‡∏ô notification
        const uptime = connectionStats.lastConnectionTime - connectionStats.startTime;
        notifyGoogleChat(`üü¢ [Auto RWS] System online (${connectionStats.totalConnections} connections, ${Math.round(uptime/1000/60)} min uptime)`);

        // Event handlers (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô - ‡∏î‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
        client.on('exists', async () => {
            if (isPaused) return;
            logInfo('üîî New mail detected');
            await fetchNewEmails(client, MAILBOX, callbackRef);
        });

        client.on('error', err => {
            if (alreadyHandled) return;
            alreadyHandled = true;
            // ‚úÖ 5. ‡πÄ‡∏û‡∏¥‡πà‡∏° error context
            logFail(`‚ùå IMAP Error: ${err.message}`, {
                code: err.code,
                source: err.source || 'imap',
                retryCount: retryCount,
                uptime: Date.now() - connectionStats.startTime
            });
            notifyGoogleChat(`‚ùå [Auto RWS] IMAP Error: ${err.message} (retry ${retryCount}/${CONFIG.MAX_RETRIES})`);
            attemptReconnect();
        });

        client.on('close', () => {
            if (alreadyHandled) return;
            alreadyHandled = true;
            logFail('üîå IMAP connection closed');
            attemptReconnect();
        });

        client.on('end', () => {
            if (alreadyHandled) return;
            alreadyHandled = true;
            logFail('üî¥ IMAP connection ended by server');
            notifyGoogleChat('üî¥ [Auto RWS] IMAP connection ended by server');
            attemptReconnect();
        });

    } catch (err) {
        // ‚úÖ 6. ‡πÄ‡∏û‡∏¥‡πà‡∏° setup error context
        logFail(`‚ùå IMAP setup failed: ${err.message}`, {
            code: err.code,
            host: config.host,
            port: config.port,
            user: config.auth.user ? 'configured' : 'missing',
            retryCount: retryCount
        });
        notifyGoogleChat(`‚ùå [Auto RWS] IMAP setup failed: ${err.message} (attempt ${retryCount + 1})`);
        attemptReconnect();
    } finally {
        isConnecting = false;
    }
}

function attemptReconnect(delayMs = CONFIG.INITIAL_RETRY_DELAY) {
    if (reconnecting) return;

    if (retryCount >= CONFIG.MAX_RETRIES) {
        const nextRetryMinutes = CONFIG.MAX_RETRY_DELAY / 60000;
        logFail(`üõë Max retries reached. Will try again in ${nextRetryMinutes} minutes.`);
        notifyGoogleChat(`‚ö†Ô∏è [Auto RWS] IMAP failed ${CONFIG.MAX_RETRIES} times. Will retry after ${nextRetryMinutes} minutes.`);
        
        setTimeout(() => {
            retryCount = 0;
            reconnecting = false;
            connectToImap(callbackRef);
        }, CONFIG.MAX_RETRY_DELAY);
        return;
    }

    retryCount++;
    reconnecting = true;
    
    // ‚úÖ 7. ‡πÄ‡∏û‡∏¥‡πà‡∏° exponential backoff ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    const exponentialDelay = Math.min(
        delayMs * Math.pow(1.5, retryCount - 1), 
        CONFIG.MAX_RETRY_DELAY
    );
    
    logInfo(`üîÑ Reconnecting to IMAP in ${exponentialDelay / 1000}s (attempt ${retryCount}/${CONFIG.MAX_RETRIES})`);
    notifyGoogleChat(`üî¥ [Auto RWS] IMAP disconnected. Attempting reconnect (${retryCount}/${CONFIG.MAX_RETRIES}) in ${Math.round(exponentialDelay/1000)}s...`);
    
    setTimeout(() => {
        reconnecting = false;
        connectToImap(callbackRef);
    }, exponentialDelay);
}

// ‚úÖ 8. ‡πÄ‡∏û‡∏¥‡πà‡∏° Health Check function (‡πÉ‡∏´‡∏°‡πà - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö integration ‡∏Å‡∏±‡∏ö fetcher)
async function checkConnection() {
    try {
        if (!client || client.destroyed) {
            return { healthy: false, error: 'No client connection' };
        }
        
        await client.noop();
        return { 
            healthy: true, 
            uptime: Date.now() - connectionStats.lastConnectionTime 
        };
    } catch (error) {
        return { 
            healthy: false, 
            error: error.message 
        };
    }
}

// ‚úÖ 9. ‡πÄ‡∏û‡∏¥‡πà‡∏° Stats function (‡πÉ‡∏´‡∏°‡πà - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö monitoring)
function getConnectionStats() {
    return {
        ...connectionStats,
        currentUptime: Date.now() - connectionStats.lastConnectionTime,
        totalUptime: Date.now() - connectionStats.startTime,
        currentRetryCount: retryCount,
        isPaused: isPaused,
        isConnecting: isConnecting,
        isReconnecting: reconnecting,
        isHealthy: client && !client.destroyed
    };
}

// Existing functions (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô - ‡∏î‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
function pauseImap() {
    isPaused = true;
    logInfo("‚è∏Ô∏è IMAP paused by user");
}

function resumeImap() {
    isPaused = false;
    logInfo("‚ñ∂Ô∏è IMAP resumed by user");
}

function isImapPaused() {
    return isPaused;
}

module.exports = {
    startListeningEmails: connectToImap,
    pauseImap,
    resumeImap,
    isImapPaused,
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° functions ‡πÉ‡∏´‡∏°‡πà
    checkConnection,        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health check
    getConnectionStats      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö monitoring
};